{"version":3,"sources":["../../../../app/tests/api/TodoAPI.test.jsx"],"names":["expect","require","TodoAPI","describe","beforeEach","localStorage","removeItem","it","toExist","todos","id","text","completed","setTodos","actualTodos","JSON","parse","getItem","toEqual","badTodos","x","y","z","toBe","getTodos","setItem","stringify","filteredTodos","filterTodos","length"],"mappings":"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","file":"TodoAPI.test.js","sourcesContent":["let expect = require('expect');\r\n\r\nlet TodoAPI = require('TodoAPI');\r\n\r\ndescribe('TodoAPI', () => {\r\n    // Clean the localStorage value\r\n    beforeEach(() => {\r\n        localStorage.removeItem('todos');\r\n    });\r\n\r\n    it('should exist', () => {\r\n        expect(TodoAPI).toExist();\r\n    });\r\n\r\n    describe('setTodos', () => {\r\n        it('should set valid todos array', () => {\r\n            let todos = [\r\n                {\r\n                    id       : 1992,\r\n                    text     : 'Set birth year',\r\n                    completed: false\r\n                }\r\n            ];\r\n\r\n            TodoAPI.setTodos(todos);\r\n            let actualTodos = JSON.parse(localStorage.getItem('todos'));\r\n\r\n            // toBe() checks if they are the same exact object or array in memory\r\n            // toEqual() just compares the value on them\r\n            // toEqual() is better for objects or arrays to check each value\r\n            expect(actualTodos).toEqual(todos);\r\n        });\r\n\r\n        it('should not set invalid todos array', () => {\r\n            let badTodos = {\r\n                x: 22,\r\n                y: 'sss',\r\n                z: function () {\r\n                    return 2;\r\n                }\r\n            };\r\n\r\n            TodoAPI.setTodos(badTodos);\r\n\r\n            expect(localStorage.getItem('todos')).toBe(null);\r\n        });\r\n    });\r\n\r\n    describe('getTodos', () => {\r\n        it('should return empty array for bad localStorage data', () => {\r\n            // We cleaned up the localStorage value in the beginning\r\n            let actualTodos = TodoAPI.getTodos();\r\n            // toBe() would fail because 2 arrays are different references to the memory\r\n            expect(actualTodos).toEqual([]);\r\n        });\r\n\r\n        it('should return todo if valid array in localStorage', () => {\r\n            let todos = [\r\n                {\r\n                    id       : 1992,\r\n                    text     : 'Set birth year',\r\n                    completed: false\r\n                }\r\n            ];\r\n\r\n            // It's good to not use other functions implemented in the same object\r\n            localStorage.setItem('todos', JSON.stringify(todos));\r\n            let actualTodos = TodoAPI.getTodos();\r\n\r\n            expect(actualTodos).toEqual(todos);\r\n        });\r\n    });\r\n\r\n    describe('filterTodos', () => {\r\n        let todos = [\r\n            {\r\n                id       : 1,\r\n                text     : 'Eat apple',\r\n                completed: true\r\n            },\r\n            {\r\n                id       : 44,\r\n                text     : 'Go apple !!!',\r\n                completed: false\r\n            },\r\n            {\r\n                id       : 2212,\r\n                text     : 'SHAYMAN',\r\n                completed: true\r\n            }\r\n        ];\r\n\r\n        it('should return all todos if showCompleted is true', () => {\r\n            let filteredTodos = TodoAPI.filterTodos(todos, true, '');\r\n            expect(filteredTodos.length).toBe(3);\r\n        });\r\n\r\n        it('should return non-completed todos when showCompleted is false', () => {\r\n            let filteredTodos = TodoAPI.filterTodos(todos, false, '');\r\n            expect(filteredTodos.length).toBe(1);\r\n        });\r\n\r\n        it('should sort todos by completed status', () => {\r\n            let filteredTodos = TodoAPI.filterTodos(todos, true, '');\r\n            expect(filteredTodos[0].completed).toBe(false);\r\n        });\r\n\r\n        it('should return all todos if searchText is empty', () => {\r\n            let filteredTodos = TodoAPI.filterTodos(todos, true, '');\r\n            expect(filteredTodos.length).toBe(3);\r\n        });\r\n\r\n        it('should filter todos by searchText \\'apple\\'', () => {\r\n            let filteredTodos = TodoAPI.filterTodos(todos, true, 'aPpLe');\r\n            expect(filteredTodos.length).toBe(2);\r\n        });\r\n    });\r\n});\r\n"]}