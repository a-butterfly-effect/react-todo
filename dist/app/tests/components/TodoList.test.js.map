{"version":3,"sources":["../../../../app/tests/components/TodoList.test.jsx"],"names":["React","require","ReactDOM","expect","$","TestUtils","TodoList","Todo","describe","it","toExist","todos","id","text","todoList","renderIntoDocument","todosComponents","scryRenderedComponentsWithType","length","toBe","$el","findDOMNode","find"],"mappings":";;AAAA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,WAAWD,QAAQ,WAAR,CAAf;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;AACA,IAAIG,IAAIH,QAAQ,QAAR,CAAR;AACA;AACA,IAAII,YAAYJ,QAAQ,yBAAR,CAAhB;;AAEA,IAAIK,WAAWL,QAAQ,UAAR,CAAf;AACA,IAAIM,OAAON,QAAQ,MAAR,CAAX;;AAEAO,SAAS,UAAT,EAAqB,YAAM;AACvBC,OAAG,cAAH,EAAmB,YAAM;AACrBN,eAAOG,QAAP,EAAiBI,OAAjB;AACH,KAFD;;AAIAD,OAAG,qDAAH,EAA0D,YAAM;AAC5D,YAAIE,QAAQ,CACR;AACIC,gBAAM,CADV;AAEIC,kBAAM;AAFV,SADQ,EAKR;AACID,gBAAM,CADV;AAEIC,kBAAM;AAFV,SALQ,CAAZ;AAUA,YAAIC,WAAWT,UAAUU,kBAAV,CAA6B,oBAAC,QAAD,IAAU,OAAOJ,KAAjB,GAA7B,CAAf;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAIK,kBAAkBX,UAAUY,8BAAV,CAAyCH,QAAzC,EAAmDP,IAAnD,CAAtB;;AAEAJ,eAAOa,gBAAgBE,MAAvB,EAA+BC,IAA/B,CAAoCR,MAAMO,MAA1C;AACH,KArBD;;AAuBAT,OAAG,yCAAH,EAA8C,YAAM;AAChD,YAAIE,QAAQ,EAAZ;AACA,YAAIG,WAAWT,UAAUU,kBAAV,CAA6B,oBAAC,QAAD,IAAU,OAAOJ,KAAjB,GAA7B,CAAf;AACA,YAAIS,MAAMhB,EAAEF,SAASmB,WAAT,CAAqBP,QAArB,CAAF,CAAV;;AAEAX,eAAOiB,IAAIE,IAAJ,CAAS,qBAAT,EAAgCJ,MAAvC,EAA+CC,IAA/C,CAAoD,CAApD;AACH,KAND;AAOH,CAnCD","file":"TodoList.test.js","sourcesContent":["let React = require('react');\r\nlet ReactDOM = require('react-dom');\r\nlet expect = require('expect');\r\nlet $ = require('jQuery');\r\n// Makes tests for React components easier\r\nlet TestUtils = require('react-addons-test-utils');\r\n\r\nlet TodoList = require('TodoList');\r\nlet Todo = require('Todo');\r\n\r\ndescribe('TodoList', () => {\r\n    it('should exist', () => {\r\n        expect(TodoList).toExist();\r\n    });\r\n\r\n    it('should render one Todo component for each todo item', () => {\r\n        let todos = [\r\n            {\r\n                id  : 1,\r\n                text: 'Dummy todo 1'\r\n            },\r\n            {\r\n                id  : 2,\r\n                text: 'Dummy to do 2'\r\n            }\r\n        ];\r\n        let todoList = TestUtils.renderIntoDocument(<TodoList todos={todos}/>);\r\n\r\n        // Store all of the todos components that are found in our todo list\r\n        // Check how many of the given component are rendered under a separate component\r\n        // First parameter is the item we wanna check\r\n        // Second parameter is the class of the item that we wanna look for\r\n        // We'll get an array of components\r\n        let todosComponents = TestUtils.scryRenderedComponentsWithType(todoList, Todo);\r\n\r\n        expect(todosComponents.length).toBe(todos.length);\r\n    });\r\n\r\n    it('should render empty message if no todos', () => {\r\n        let todos = [];\r\n        let todoList = TestUtils.renderIntoDocument(<TodoList todos={todos}/>);\r\n        let $el = $(ReactDOM.findDOMNode(todoList));\r\n\r\n        expect($el.find('.container__message').length).toBe(1);\r\n    });\r\n});"]}