{"version":3,"sources":["../../../../app/tests/components/TodoApp.test.jsx"],"names":["React","require","ReactDOM","expect","$","TestUtils","TodoApp","describe","it","toExist","todoText","todoApp","renderIntoDocument","setState","todos","handleAddTodo","state","text","toBe","createdAt","toBeA","todoData","id","completed","completedAt","undefined","handleToggle","toNotExist"],"mappings":";;AAAA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,WAAWD,QAAQ,WAAR,CAAf;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;AACA,IAAIG,IAAIH,QAAQ,QAAR,CAAR;AACA;AACA,IAAII,YAAYJ,QAAQ,yBAAR,CAAhB;;AAEA,IAAIK,UAAUL,QAAQ,SAAR,CAAd;;AAEAM,SAAS,SAAT,EAAoB,YAAM;AACtBC,OAAG,cAAH,EAAmB,YAAM;AACrBL,eAAOG,OAAP,EAAgBG,OAAhB;AACH,KAFD;;AAIAD,OAAG,qDAAH,EAA0D,YAAM;AAC5D,YAAIE,WAAW,YAAf;AACA,YAAIC,UAAUN,UAAUO,kBAAV,CAA6B,oBAAC,OAAD,OAA7B,CAAd;;AAEAD,gBAAQE,QAAR,CAAiB;AACbC,mBAAO;AADM,SAAjB;;AAIA;AACAH,gBAAQI,aAAR,CAAsBL,QAAtB;;AAEAP,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBG,IAA9B,EAAoCC,IAApC,CAAyCR,QAAzC;AACA;AACAP,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBK,SAA9B,EAAyCC,KAAzC,CAA+C,QAA/C;AACH,KAdD;;AAgBAZ,OAAG,wDAAH,EAA6D,YAAM;AAC/D,YAAIa,WAAW;AACXC,gBAAa,EADF;AAEXL,kBAAa,iBAFF;AAGXM,uBAAa,KAHF;AAIXJ,uBAAa,CAJF;AAKXK,yBAAaC;AALF,SAAf;;AAQA,YAAId,UAAUN,UAAUO,kBAAV,CAA6B,oBAAC,OAAD,OAA7B,CAAd;;AAEAD,gBAAQE,QAAR,CAAiB;AACbC,mBAAO,CACHO,QADG;AADM,SAAjB;;AAMA;AACAlB,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBS,SAA9B,EAAyCL,IAAzC,CAA8C,KAA9C;;AAEA;AACAP,gBAAQe,YAAR,CAAqBL,SAASC,EAA9B;AACAnB,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBS,SAA9B,EAAyCL,IAAzC,CAA8C,IAA9C;AACA;AACAf,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBU,WAA9B,EAA2CJ,KAA3C,CAAiD,QAAjD;AACH,KAzBD;;AA2BAZ,OAAG,0EAAH,EAA+E,YAAM;AACjF,YAAIa,WAAW;AACXC,gBAAa,EADF;AAEXL,kBAAa,iBAFF;AAGXM,uBAAa,IAHF;AAIXJ,uBAAa,CAJF;AAKXK,yBAAa;AALF,SAAf;;AAQA,YAAIb,UAAUN,UAAUO,kBAAV,CAA6B,oBAAC,OAAD,OAA7B,CAAd;;AAEAD,gBAAQE,QAAR,CAAiB;AACbC,mBAAO,CACHO,QADG;AADM,SAAjB;;AAMA;AACAlB,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBS,SAA9B,EAAyCL,IAAzC,CAA8C,IAA9C;;AAEA;AACAP,gBAAQe,YAAR,CAAqBL,SAASC,EAA9B;AACAnB,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBS,SAA9B,EAAyCL,IAAzC,CAA8C,KAA9C;;AAEA;AACAf,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBU,WAA9B,EAA2CJ,KAA3C,CAAiD,WAAjD;AACA;AACAjB,eAAOQ,QAAQK,KAAR,CAAcF,KAAd,CAAoB,CAApB,EAAuBU,WAA9B,EAA2CG,UAA3C;AAEH,KA7BD;AA8BH,CA9ED","file":"TodoApp.test.js","sourcesContent":["let React = require('react');\r\nlet ReactDOM = require('react-dom');\r\nlet expect = require('expect');\r\nlet $ = require('jQuery');\r\n// Makes tests for React components easier\r\nlet TestUtils = require('react-addons-test-utils');\r\n\r\nlet TodoApp = require('TodoApp');\r\n\r\ndescribe('TodoApp', () => {\r\n    it('should exist', () => {\r\n        expect(TodoApp).toExist();\r\n    });\r\n\r\n    it('should add todo to the todos state on handleAddTodo', () => {\r\n        let todoText = 'Must test!';\r\n        let todoApp = TestUtils.renderIntoDocument(<TodoApp />);\r\n\r\n        todoApp.setState({\r\n            todos: []\r\n        });\r\n\r\n        // Simulate the handleAddTodo function\r\n        todoApp.handleAddTodo(todoText);\r\n\r\n        expect(todoApp.state.todos[0].text).toBe(todoText);\r\n        // Expect createdAt to be a number\r\n        expect(todoApp.state.todos[0].createdAt).toBeA('number');\r\n    });\r\n\r\n    it('should toggle completed value when handleToggle called', () => {\r\n        let todoData = {\r\n            id         : 11,\r\n            text       : 'Testing testing',\r\n            completed  : false,\r\n            createdAt  : 0,\r\n            completedAt: undefined\r\n        };\r\n\r\n        let todoApp = TestUtils.renderIntoDocument(<TodoApp/>);\r\n\r\n        todoApp.setState({\r\n            todos: [\r\n                todoData\r\n            ]\r\n        });\r\n\r\n        // Check that todos first item has completed value of false\r\n        expect(todoApp.state.todos[0].completed).toBe(false);\r\n\r\n        // Call and verify handleToggle to 11\r\n        todoApp.handleToggle(todoData.id);\r\n        expect(todoApp.state.todos[0].completed).toBe(true);\r\n        // Expect completedAt to be a number\r\n        expect(todoApp.state.todos[0].completedAt).toBeA('number');\r\n    });\r\n\r\n    it('should remove completedAt when completed gets toggled from true to false', () => {\r\n        let todoData = {\r\n            id         : 11,\r\n            text       : 'Testing testing',\r\n            completed  : true,\r\n            createdAt  : 0,\r\n            completedAt: 9999\r\n        };\r\n\r\n        let todoApp = TestUtils.renderIntoDocument(<TodoApp/>);\r\n\r\n        todoApp.setState({\r\n            todos: [\r\n                todoData\r\n            ]\r\n        });\r\n\r\n        // Check that todos first item has completed value of true\r\n        expect(todoApp.state.todos[0].completed).toBe(true);\r\n\r\n        // Call and verify handleToggle to 11\r\n        todoApp.handleToggle(todoData.id);\r\n        expect(todoApp.state.todos[0].completed).toBe(false);\r\n\r\n        // Expect completedAt to be undefined\r\n        expect(todoApp.state.todos[0].completedAt).toBeA('undefined');\r\n        // or\r\n        expect(todoApp.state.todos[0].completedAt).toNotExist();\r\n\r\n    });\r\n});"]}