{"version":3,"sources":["../../../../app/tests/components/TodoSearch.test.jsx"],"names":["React","require","ReactDOM","expect","$","TestUtils","TodoSearch","describe","it","toExist","searchText","spy","createSpy","todoSearch","renderIntoDocument","refs","value","Simulate","change","toHaveBeenCalledWith","showCompleted","checked"],"mappings":";;AAAA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;AACA,IAAIC,WAAWD,QAAQ,WAAR,CAAf;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;AACA,IAAIG,IAAIH,QAAQ,QAAR,CAAR;AACA;AACA,IAAII,YAAYJ,QAAQ,yBAAR,CAAhB;;AAEA,IAAIK,aAAaL,QAAQ,YAAR,CAAjB;;AAEAM,SAAS,YAAT,EAAuB,YAAM;AACzBC,OAAG,cAAH,EAAmB,YAAM;AACrBL,eAAOG,UAAP,EAAmBG,OAAnB;AACH,KAFD;;AAIAD,OAAG,8CAAH,EAAmD,YAAM;AACrD,YAAIE,aAAa,QAAjB;AACA,YAAIC,MAAMR,OAAOS,SAAP,EAAV;AACA,YAAIC,aAAaR,UAAUS,kBAAV,CAA6B,oBAAC,UAAD,IAAY,UAAUH,GAAtB,GAA7B,CAAjB;;AAEAE,mBAAWE,IAAX,CAAgBL,UAAhB,CAA2BM,KAA3B,GAAmCN,UAAnC;;AAEA;AACAL,kBAAUY,QAAV,CAAmBC,MAAnB,CAA0BL,WAAWE,IAAX,CAAgBL,UAA1C;;AAEA;AACAP,eAAOQ,GAAP,EAAYQ,oBAAZ,CAAiC,KAAjC,EAAwCT,UAAxC;AACH,KAZD;;AAcAF,OAAG,8CAAH,EAAmD,YAAM;AACrD,YAAIG,MAAMR,OAAOS,SAAP,EAAV;AACA,YAAIC,aAAaR,UAAUS,kBAAV,CAA6B,oBAAC,UAAD,IAAY,UAAUH,GAAtB,GAA7B,CAAjB;;AAEAE,mBAAWE,IAAX,CAAgBK,aAAhB,CAA8BC,OAA9B,GAAwC,IAAxC;;AAEAhB,kBAAUY,QAAV,CAAmBC,MAAnB,CAA0BL,WAAWE,IAAX,CAAgBK,aAA1C;;AAEAjB,eAAOQ,GAAP,EAAYQ,oBAAZ,CAAiC,IAAjC,EAAuC,EAAvC;AACH,KATD;AAUH,CA7BD","file":"TodoSearch.test.js","sourcesContent":["let React = require('react');\r\nlet ReactDOM = require('react-dom');\r\nlet expect = require('expect');\r\nlet $ = require('jQuery');\r\n// Makes tests for React components easier\r\nlet TestUtils = require('react-addons-test-utils');\r\n\r\nlet TodoSearch = require('TodoSearch');\r\n\r\ndescribe('TodoSearch', () => {\r\n    it('should exist', () => {\r\n        expect(TodoSearch).toExist();\r\n    })\r\n\r\n    it('should call onSearch with entered input text', () => {\r\n        let searchText = 'Google';\r\n        let spy = expect.createSpy();\r\n        let todoSearch = TestUtils.renderIntoDocument(<TodoSearch onSearch={spy}/>);\r\n\r\n        todoSearch.refs.searchText.value = searchText;\r\n\r\n        // Simulate the change event which means that are function is going to get called\r\n        TestUtils.Simulate.change(todoSearch.refs.searchText);\r\n\r\n        // false because the initial value of showCompleted is false\r\n        expect(spy).toHaveBeenCalledWith(false, searchText);\r\n    });\r\n\r\n    it('should call onSearch with proper check value', () => {\r\n        let spy = expect.createSpy();\r\n        let todoSearch = TestUtils.renderIntoDocument(<TodoSearch onSearch={spy}/>);\r\n\r\n        todoSearch.refs.showCompleted.checked = true;\r\n\r\n        TestUtils.Simulate.change(todoSearch.refs.showCompleted);\r\n\r\n        expect(spy).toHaveBeenCalledWith(true, '');\r\n    });\r\n});"]}